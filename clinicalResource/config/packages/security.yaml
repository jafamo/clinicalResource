security:
    access_denied_url: /error/403
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Domain\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            entry_point: App\Infrastructure\Security\AuthenticationEntryPoint
            provider: app_user_provider
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            logout:
                path: /logout
            form_login:
                # "app_login" is the name of the route created previously
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path: app_home

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
        api:
            pattern: ^/api
            stateless: true
            jwt: ~
            logout:
                path: api_logout
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
        admin:
            lazy: true
            entry_point: App\Infrastructure\Security\AuthenticationEntryPoint
            pattern: /admin(.*)
            provider: app_user_provider
            context: user
            form_login:
                login_path: security_login  #sonata_user_admin_security_login
                check_path: security_login #sonata_user_admin_security_check
                enable_csrf: true
                default_target_path: sonata_admin_dashboard
            logout:
                path: app_logout #sonata_user_admin_security_logout
                target: app_logout
        #                target: sonata_user_admin_security_login
        #            remember_me:
        #                secret: '%env(APP_SECRET)%'
        #                lifetime: 2629746
        #                path: /admin


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        ### - API - ###
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/pruebas/, roles: ROLE_SUPER_ADMIN }
        - { path: ^/api,       roles: ROLE_SUPER_ADMIN }
        - { path: ^/home,      roles: PUBLIC_ACCESS }
        #        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

        ### - ADMIN SONATA - ###
#        - { path: ^/admin/login$, role: PUBLIC_ACCESS }
#        - { path: ^/admin/logout$, role: PUBLIC_ACCESS }
#        - { path: ^/admin/login_check$, role: PUBLIC_ACCESS }
#        - { path: ^/admin/request$, role: PUBLIC_ACCESS }
#        - { path: ^/admin/check-email$, role: PUBLIC_ACCESS }
#        - { path: ^/admin/reset/.*$, role: PUBLIC_ACCESS }

            # Secured part of the site
            # This config requires being logged for the whole site and having the admin role for the admin part.
            # Change these rules to adapt them to your needs

        - { path: ^/.*, role: PUBLIC_ACCESS }
#        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: ROLE_ADMIN }

        - { path: ^/upload-csv, role: ROLE_ADMIN }

#        - { path: ^/.*, role: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
